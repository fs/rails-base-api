#!/usr/bin/env ruby

require 'fileutils'

class Bootstrap
  def initialize(argv)
    @argv = argv
  end

  def run
    before_install
    install
    after_install
  end

  private

  def before_install
  end

  def install
    setup_database_yml
    setup_dotenv
    install_gems
    migrate_db
  end

  def after_install
  end

  def setup_database_yml
    setup_file_from_template('config/database.yml')
  end

  def setup_dotenv
    setup_file_from_template('.env')
  end

  def install_gems
    without = is_ci? ? 'development' : ''
    path = is_ci? ? 'vendor/bundle' : '.bundle'

    system_with_note("bundle install --path #{path} --without production staging #{without}")
  end

  def migrate_db
    system_with_note('bundle exec rake db:setup')
  end

  def install_bundle_cache
    system_with_note('wget https://s3.amazonaws.com/bundle-cache-builds/bundle_cache')
    system_with_note('chmod +x ./bundle_cache')
    system_with_note('./bundle_cache download ; echo 1')
  end

  def upload_bundle_cache
    system_with_note('./bundle_cache upload')
  end

  def setup_file_from_template(file)
    unless File.exists?(File.join(rails_root, file))
      puts "#{file} is missing, installing..."
      FileUtils.cp(File.join(rails_root, "#{file}.example"), File.join(rails_root, file))
    end
  end

  def rails_root
    @rails_root ||= File.expand_path('../../', __FILE__)
  end

  def is_ci?
    @is_ci ||= @argv.shift == 'ci'
  end

  def system_with_note(command)
    puts "Running #{command} ..."
    result = system(command) || exit(1)
    puts "\n\n"

    result
  end
end


Bootstrap.new(ARGV).run
